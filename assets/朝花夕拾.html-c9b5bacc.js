import{_ as n,o as a,c as s,d as t}from"./app-ff5a96d8.js";const e="/assets/image-20230724151325568-7bc39aaf.png",p="/assets/java内存分区-33013fda.png",o="/assets/image-20230413202903759-0d11d6ac.png",i={},c=t(`<h1 id="朝花夕拾" tabindex="-1"><a class="header-anchor" href="#朝花夕拾" aria-hidden="true">#</a> 朝花夕拾</h1><h2 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h2><h3 id="_1-vmware-安装-centos7-并通过-finalshell连接" tabindex="-1"><a class="header-anchor" href="#_1-vmware-安装-centos7-并通过-finalshell连接" aria-hidden="true">#</a> 1 VMware 安装 CentOS7 并通过 FinalShell连接</h3><ol><li><p>首先是版本的选择，我使用的是VMware player 17，安装时一开始选用的是CentOS7 2009的版本，发现安装有问题，换成了2207版后安装成功。</p></li><li><p>关闭CentOS 防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭</span>
systemctl stop firewalld
<span class="token comment"># 禁止开机启动防火墙</span>
systemctl disable firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>ifconfig</code>命令查看主机的ip地址，如果提示没有ifconfig命令的先安装<code>sudo yum install net-tools</code></p></li><li><p>在FinalShell 中新建SSH 连接，输入上一步得到的ip地址和虚拟机的用户名和密码即可登录</p></li></ol><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h2><h3 id="_1-java-内存分区" tabindex="-1"><a class="header-anchor" href="#_1-java-内存分区" aria-hidden="true">#</a> 1 Java 内存分区</h3><figure><img src="`+e+'" alt="image-20230724151325568" tabindex="0" loading="lazy"><figcaption>image-20230724151325568</figcaption></figure><figure><img src="'+p+`" alt="java内存分区" tabindex="0" loading="lazy"><figcaption>java内存分区</figcaption></figure><p>PC寄存器就是程序计数器</p><h2 id="java-面向对象" tabindex="-1"><a class="header-anchor" href="#java-面向对象" aria-hidden="true">#</a> Java 面向对象</h2><h3 id="_1-父子类的静态初始化代码块、构造代码块、构造方法执行顺序" tabindex="-1"><a class="header-anchor" href="#_1-父子类的静态初始化代码块、构造代码块、构造方法执行顺序" aria-hidden="true">#</a> 1 父子类的静态初始化代码块、构造代码块、构造方法执行顺序</h3><p>静态初始化代码块、构造代码块、构造方法 当涉及到继承时，按照如下顺序执行：</p><ol><li>执行父类的静态代码块</li><li>执行子类的静态代码块</li><li>执行父类的构造代码块</li><li>执行父类的构造函数</li><li>执行子类的构造代码块</li><li>执行子类的构造函数</li></ol><h2 id="java-io" tabindex="-1"><a class="header-anchor" href="#java-io" aria-hidden="true">#</a> Java IO</h2><h3 id="_1-java中bufferedreader与scanner读入的区别" tabindex="-1"><a class="header-anchor" href="#_1-java中bufferedreader与scanner读入的区别" aria-hidden="true">#</a> 1 Java中BufferedReader与Scanner读入的区别</h3><p><strong>4.26号华为机考第二题，使用Scanner读入数据一直超时,ORZ</strong></p><p>Java中可以使用BufferedReader和Scanner来进行文件或者输入流的读取操作。二者有以下区别：</p><ol><li>BufferedReader是基于字符流的，而Scanner即可以基于字符流，也可以基于字节流。</li><li>BufferedReader比Scanner<strong>更快、更适合读取大量数据</strong>。因为它读取字符时直接将字符存入内存缓冲区，再从内存缓冲区中读取数据。Scanner则需要对输入进行解析，并且其还存在一些缓存和正则表达式等开销，可能会降低性能，同时也会增加代码的复杂度。</li><li>Scanner可以方便地进行分词等操作，支持各种类型的数据输入，包括int、float、double、boolean、String等。而BufferedReader只能够读取字符串类型的数据，如果需要进行类型转换，需要手动进行。</li></ol><p><strong>读取示例</strong></p><p>请给出两者读取以下数据的示例 第一行代表 接下来要出现的数据的行数 第二行开始每一行第一个数代表 后面出现数的个数 要求将第二行开始的数据存入数组 3</p><p>1 2</p><p>1 3</p><p>1 1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReaderExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 输出结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用Scanner读取示例：</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须加上，否则下面的读取会有问题</span>
        
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 输出结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java多线程" tabindex="-1"><a class="header-anchor" href="#java多线程" aria-hidden="true">#</a> Java多线程</h2><h3 id="java中的原子操作" tabindex="-1"><a class="header-anchor" href="#java中的原子操作" aria-hidden="true">#</a> Java中的原子操作</h3><ol><li>除long和double之外的基本类型的赋值操作</li><li>所有引用reference的赋值操作</li><li>java.concurrent.Atomic.* 包中所有类的一切操作</li></ol><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><h3 id="_1-spring-版本变化" tabindex="-1"><a class="header-anchor" href="#_1-spring-版本变化" aria-hidden="true">#</a> 1 Spring 版本变化</h3><table><thead><tr><th style="text-align:left;">Version</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">Spring 2.5</td><td>2007 第一个支持注解的版本</td></tr><tr><td style="text-align:left;">Spring 3.0</td><td>2009 Java5 为JEE6提供支持</td></tr><tr><td style="text-align:left;">Spring 4.0</td><td>2013 JAVA8</td></tr><tr><td style="text-align:left;">Spring 5.0</td><td>支持响应式编程</td></tr></tbody></table><h3 id="_2-spring-的构成" tabindex="-1"><a class="header-anchor" href="#_2-spring-的构成" aria-hidden="true">#</a> 2 Spring 的构成</h3><figure><img src="`+o+`" alt="image-20230413202903759" tabindex="0" loading="lazy"><figcaption>image-20230413202903759</figcaption></figure><ol><li>Spring 核心容器 <ul><li>Spring Core</li><li>Spring Bean</li><li>Spring Expression Language</li><li>Spring Context</li></ul></li></ol><h3 id="_3-spring-特色功能" tabindex="-1"><a class="header-anchor" href="#_3-spring-特色功能" aria-hidden="true">#</a> 3 Spring 特色功能</h3><ol><li>轻量级：代码量轻便</li><li>IOC：控制反转</li><li>AOP：面向切面编程可以将应用业务逻辑和系统服务分离</li><li>容器：Spring负责创建和管理Bean对象的生命周期和配置</li><li>MVC：用于配置Web应用，非常方便</li><li>事务管理：提供了用于事务管理的通用抽象层</li><li>JDBC异常：Spring的JDBC抽象层提供了一个异常层次结构，简化了错误处理策略</li></ol><h3 id="_4-使用-bean注解注入spring容器和解析xml文件注入有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-使用-bean注解注入spring容器和解析xml文件注入有什么区别" aria-hidden="true">#</a> 4 使用@Bean注解注入Spring容器和解析xml文件注入有什么区别</h3><p>使用@Bean注解注入Spring容器和解析XML文件注入的区别如下：</p><ol><li>配置方式不同：使用@Bean注解，需要在一个Java配置类中定义Bean；而解析XML文件，则需在Spring XML配置文件中定义Bean。</li><li>语法不同：使用@Bean注解时，只需在方法上添加@Bean注解即可，而在XML文件中，则需要使用特定的标签以及属性来定义Bean。</li><li>错误检查不同：在使用@Bean注解时，Spring会在应用启动时对Bean进行一些基本的错误检查，例如是否存在循环引用；而在XML文件中定义Bean时，这些错误只能在程序运行时才能被检查出来。</li><li>繁琐程度不同：使用@Bean注解时，通常只需要在一个类中添加几个注解即可完成Bean的定义；而在XML文件中定义Bean时，可能需要同时定义多个XML标签，并且需要手动指定Bean之间的关系。</li></ol><p>总的来说，使用@Bean注解能够更加方便地定义Bean，并且Spring会在应用启动时自动检查Bean是否正确；而在XML文件中定义Bean虽然更加繁琐，但是也具有灵活性和可读性。实际使用中，可以根据具体情况选择合适的方式来定义Bean。</p><h3 id="_5-spring-ioc的原理" tabindex="-1"><a class="header-anchor" href="#_5-spring-ioc的原理" aria-hidden="true">#</a> 5 Spring IOC的原理</h3><p>XML解析 + 工厂模式 + 反射机制</p><ul><li><p>**使用技术：**XML解析、工厂模式、反射</p></li><li><p>**工厂模式：**解耦</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserService.java</span>
<span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserAdd</span> add <span class="token operator">=</span> <span class="token class-name">UserFactory</span><span class="token punctuation">.</span><span class="token function">getAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserAdd.java</span>
<span class="token keyword">class</span> <span class="token class-name">UserAdd</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// todo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserFactory.java</span>
<span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserAdd</span> <span class="token function">getAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>IOC 的过程</strong></p><ol><li><p>配置 XML 文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--配置 User 对象创建--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.ymk.learnSpring.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建工厂类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserFactory.java</span>
<span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserAdd</span> <span class="token function">getAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> classValue <span class="token operator">=</span> <span class="token keyword">class</span>属性值<span class="token punctuation">;</span> <span class="token comment">// xml解析得到对象名</span>
        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过反射创建对象</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">UserAdd</span><span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h3 id="_6-spring的配置方式" tabindex="-1"><a class="header-anchor" href="#_6-spring的配置方式" aria-hidden="true">#</a> 6 Spring的配置方式</h3><ol><li>基于XML的配置：通过XML文件配置应用程序上下文（Application Context），定义bean之间的关系，指定属性来装配bean之间的依赖关系。</li><li>基于注解的配置：使用注解来简化配置，允许通过添加注解来自动装配bean之间的依赖关系。注解配置包括@Service、@Component、@Repository、@Controller等。</li><li>基于Java的配置：使用基于Java的编程模式来配置Spring应用程序上下文。通过调用@Configuration类中的@Bean方法声明bean并指定依赖关系。</li></ol><h3 id="_7-spring支持哪几种bean-scope-bean的作用域" tabindex="-1"><a class="header-anchor" href="#_7-spring支持哪几种bean-scope-bean的作用域" aria-hidden="true">#</a> 7 Spring支持哪几种bean scope（bean的作用域）</h3><p>&quot;Bean scope&quot;指的是Spring中定义<strong>bean的作用域</strong>。它定义了bean的生命周期和可见范围，在系统运行时决定Spring容器如何创建和管理bean实例。</p><p>Spring中最常用的bean scopes有：</p><ul><li><strong>singleton</strong>：默认值，表示在整个应用程序上下文中只存在一个共享的bean实例。</li><li><strong>prototype</strong>：表示每次调用时都会创建一个新的bean实例。</li><li><strong>request</strong>：表示每个HTTP请求都将创建一个新的bean实例，该bean仅在当前请求的范围内可见。</li><li><strong>session</strong>：表示每个HTTP会话都将创建一个新的bean实例，该bean仅在当前会话的范围内可见。</li><li><strong>global-session</strong>：类似于标准的 HTTP Session 作用域，不过它仅仅在基于portlet 的 web 应用中才有意义。</li></ul><h3 id="_8-spring-bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_8-spring-bean的生命周期" aria-hidden="true">#</a> 8 Spring bean的生命周期</h3><ol><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 的引用（调用 set 方法）</li><li>（可选）bean 前置处理器</li><li>调用 bean 的初始化方法（需要自己配置初始化方法）</li><li>（可选）bean 后置处理器</li><li>bean 可以使用了（对象已经获取到了）</li><li>当容器关闭时，调用 bean 销毁的方法（需要自己配置销毁的方法）</li></ol><h3 id="_9-什么叫spring的内部bean" tabindex="-1"><a class="header-anchor" href="#_9-什么叫spring的内部bean" aria-hidden="true">#</a> 9 什么叫Spring的内部Bean</h3><p>只有将 bean 用作另一个 bean 的属性时，才能将 bean 声明为内部 bean。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;bean id=“StudentBean&quot; class=&quot;com.edureka.Student&quot;&gt;
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--This is inner bean --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.edureka.Person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Scott<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>Bangalore<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-spring有哪些自动装配方式" tabindex="-1"><a class="header-anchor" href="#_10-spring有哪些自动装配方式" aria-hidden="true">#</a> 10 Spring有哪些自动装配方式</h3><p>Spring中实现自动装配的方式有两种：</p><ol><li>XML配置文件</li><li>注解</li></ol><p>其中，XML配置文件的实现方式在XML文件中使用&lt;bean&gt;等标签手动指定依赖关系；而注解的实现方式则是使用各种注解，如@Autowired、@Resource等，在Java类中指定和注入依赖。需要注意的是，使用注解进行自动装配时需要在配置类中使用@ComponentScan或@EnableAutoConfiguration等注解来开启自动扫描和自动装配的功能。</p><h3 id="_11-component-controller-repository-service-有何区别" tabindex="-1"><a class="header-anchor" href="#_11-component-controller-repository-service-有何区别" aria-hidden="true">#</a> 11 @Component, @Controller, @Repository @Service 有何区别？</h3><ol><li>用途不同</li></ol><ul><li>@Component：通用注解，表示一个受Spring容器管理的组件。</li><li>@Controller：主要用于标识Spring MVC中的控制器组件。</li><li>@Repository：主要用于标识数据访问组件，例如<strong>DAO层</strong>。</li><li>@Service：主要用于标识服务层组件，即<strong>业务逻辑层</strong>。</li></ul><ol><li>角色不同</li></ol><ul><li>@Component和@Service和@Repository注解类似，都是注入bean的注解，而@Controller是用于定义控制器，负责完成接收HTTP请求、调用业务逻辑处理模块、返回HTTP响应等工作。</li></ul><ol><li>自动扫描时的不同</li></ol><ul><li>Spring在进行组件扫描时，会自动将标注了@Component、@Controller、@Repository和@Service注解的类扫描到Spring容器中，其中@Component是最基础的注解，其他三个注解是@Component的衍生注解。但是在扫描时，Spring会根据注解名称的不同，将它们分配到不同的命名空间中，以便在后续的处理中能够使用更加精确的语义来描述这些组件。</li></ul><h3 id="_12-component-bean有何区别" tabindex="-1"><a class="header-anchor" href="#_12-component-bean有何区别" aria-hidden="true">#</a> 12 @Component,@Bean有何区别？</h3><p>作用对象不同：@Component 注解作用于<strong>类</strong>，而 @Bean 注解作用于<strong>方法</strong>、</p><p>@Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。</p><p><strong>@Bean 注解比 @Component 注解的自定义性更强</strong>，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 @Bean 来实现。</p><p>@Bean 注解使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Component 注解使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这个例子是通过 @Component 无法实现的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">OneService</span> <span class="token function">getService</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	when <span class="token number">1</span><span class="token operator">:</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	when <span class="token number">2</span><span class="token operator">:</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	when <span class="token number">3</span><span class="token operator">:</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-qualifier-注解有什么用" tabindex="-1"><a class="header-anchor" href="#_12-qualifier-注解有什么用" aria-hidden="true">#</a> 12 @Qualifier 注解有什么用？</h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪 个确切的 bean</p><h3 id="_13-aop底层原理" tabindex="-1"><a class="header-anchor" href="#_13-aop底层原理" aria-hidden="true">#</a> 13 AOP底层原理</h3><p><strong>AOP 底层使用代理</strong></p><ol><li><p><strong>有接口情况，使用 JDK 动态代理</strong> 创建一个<strong>接口实现类</strong>代理对象</p><p>JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类：Proxy 和 InvocationHandler。 InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类 的代码，动态将横切逻辑和业务逻辑编制在一起。Proxy 利用 InvocationHandler 动态创建 一个符合某一接口的实例，生成目标类的代理对象</p></li><li><p><strong>没有接口情况，使用 CGLIB 动态代理 <strong>创建当前类</strong>子类</strong>的代理对象</p><p>CGLib 全称为 Code Generation Library，是一个强大的高性能，高质量的代码生成类库， 可以在运行期扩展 Java 类与实现 Java 接口，CGLib 封装了 asm，可以再运行期动态生成新 的 class。和 JDK 动态代理相比较：JDK 创建代理有一个限制，就是只能为接口创建代理实例， 而对于没有通过接口定义业务方法的类，则可以通过 CGLib 创建动态代理</p></li></ol><h3 id="_14-spring框架用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_14-spring框架用到了哪些设计模式" aria-hidden="true">#</a> 14 Spring框架用到了哪些设计模式</h3><ol><li>工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；</li><li>单例模式：Bean默认为单例模式。</li><li>代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；</li><li>模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如 Spring中listener的实现--ApplicationListener</li></ol><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> SpringMVC</h2><h3 id="_1-springmvc是什么" tabindex="-1"><a class="header-anchor" href="#_1-springmvc是什么" aria-hidden="true">#</a> 1 SpringMVC是什么</h3><p>springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上spring的整合</p><h3 id="_2-springmvc流程" tabindex="-1"><a class="header-anchor" href="#_2-springmvc流程" aria-hidden="true">#</a> 2 SpringMVC流程</h3><ol><li>用户发送请求至前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol><figure><img src="https://img-blog.csdnimg.cn/20200912202610130.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzE5MjQ3Mw==,size_16,color_FFFFFF,t_70#pic_center" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>组件：</p><p>1、<strong>前端控制器DispatcherServlet</strong>（不需要工程师开发）,由框架提供 作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。 用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求， dispatcherServlet的存在降低了组件之间的耦合性。</p><p>2、<strong>处理器映射器HandlerMapping</strong>(不需要工程师开发),由框架提供 作用：根据请求的url查找Handler HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式， 实现接口方式，注解方式等。</p><p>3、<strong>处理器适配器HandlerAdapter</strong> 作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler 通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><p>4、<strong>处理器Handler</strong>(需要工程师开发) 注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。 由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p><p>5、<strong>视图解析器View resolver</strong>(不需要工程师开发),由框架提供 作用：进行视图解析，根据逻辑视图名解析成真正的视图（view） View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。springmvc框架提供了很多的View视图类型，包括：jstlView、 freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求 开发具体的页面。</p><p>6、<strong>视图View</strong>(需要工程师开发jsp...) View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）核心架构的具体流程步骤如下： 1、首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访 问点，进行全局的流程控制</p><h3 id="_3-转发和重定向的区别" tabindex="-1"><a class="header-anchor" href="#_3-转发和重定向的区别" aria-hidden="true">#</a> 3 转发和重定向的区别</h3><ul><li>转发指的是在原始请求的基础上将其转发到其他URL上，接收者看到的还是原始请求的URL。</li><li>重定向则是将原始请求的响应被替换为一个新的响应，新的响应里包含了一个指向新URL的Location头字段，浏览器会重新发起一个新的请求去获取这个新URL的资源。</li></ul><h3 id="_4-继承-webmvcconfigureradapter-抽象类-常用的重写方法列举几个" tabindex="-1"><a class="header-anchor" href="#_4-继承-webmvcconfigureradapter-抽象类-常用的重写方法列举几个" aria-hidden="true">#</a> 4 继承 WebMvcConfigurerAdapter 抽象类，常用的重写方法列举几个</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 解决跨域问题 **/</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 添加拦截器 **/</span>
<span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 这里配置视图解析器 **/</span>
<span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 配置内容裁决的一些选项 **/</span>
<span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 视图跳转控制器 **/</span>
<span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 静态资源处理 **/</span>
<span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** 默认静态资源处理器 **/</span>
<span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> SpringBoot</h2><h3 id="_1-springboot特点" tabindex="-1"><a class="header-anchor" href="#_1-springboot特点" aria-hidden="true">#</a> 1 SpringBoot特点</h3><ol><li><p>独立运行</p><p>Spring Boot而且内嵌了各种servlet容器，Tomcat、Jetty等，现在不再需要打成war包部署到容器中，Spring Boot只要打成一个可执行的 jar包就能独立运行，所有的依赖包都在一个jar包内。</p></li><li><p>简化配置</p><p>spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置。</p></li><li><p>自动配置 Spring Boot能根据当前类路径下的类、jar包来自动配置bean，如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他 配置。</p></li><li><p>无代码生成和XML配置</p><p>Spring Boot配置过程中无代码生成，也无需XML配置文件就能完成所有配置工作，这一切都是借助于条件注解完成的，这也是Spring4.x的 核心功能之一。</p></li><li><p>应用监控</p><p>Spring Boot提供一系列端点可以监控服务及应用，做健康检测</p></li></ol><h3 id="_2-springboot中的starters" tabindex="-1"><a class="header-anchor" href="#_2-springboot中的starters" aria-hidden="true">#</a> 2 SpringBoot中的Starters</h3><ul><li><p><strong>Starters是什么</strong>：</p><p>Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代 码和依赖包。如你想使用Spring JPA访问数据库，只要加入springboot-starter-data-jpa启动器依赖就能使用了。Starters包含了许多项目中 需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。</p></li><li><p><strong>Starters命名</strong>：</p><p>Spring Boot官方的启动器都是以spring-boot-starter-命名的，代表了一个特定的应用类型。第三方的 启动器不能以spring-boot开头命名，它们都被Spring Boot官方保留。一般一个第三方的应该这样命 名，像mybatis的mybatis-spring-boot-starter。</p></li><li><p><strong>以下是Spring Boot中各个启动器的名称和简要功能列表</strong>：</p><table><thead><tr><th>启动器</th><th>功能描述</th></tr></thead><tbody><tr><td><code>spring-boot-starter</code></td><td>默认的Starter，包含自动配置，日志记录和YAML支持等。</td></tr><tr><td><code>spring-boot-starter-actuator</code></td><td>用于监视和管理配置、指标和其他运行时属性的模块。</td></tr><tr><td><code>spring-boot-starter-amqp</code></td><td>使用AMQP（高级消息队列协议）发送和接收消息的支持。</td></tr><tr><td><code>spring-boot-starter-aop</code></td><td>面向切面编程的依赖库，提供了对Spring AOP和AspectJ的集成支持。</td></tr><tr><td><code>spring-boot-starter-artemis</code></td><td>使用Apache Artemis进行消息传递的支持。</td></tr><tr><td><code>spring-boot-starter-batch</code></td><td>Spring Batch批处理框架的支持。</td></tr><tr><td><code>spring-boot-starter-cache</code></td><td>Spring框架缓存抽象层的支持。</td></tr><tr><td><code>spring-boot-starter-data-elasticsearch</code></td><td>使用Elasticsearch搜索引擎进行索引和搜索文档的支持。</td></tr><tr><td><code>spring-boot-starter-data-jdbc</code></td><td>使用JDBC进行数据库访问的支持。</td></tr><tr><td><code>spring-boot-starter-data-jpa</code></td><td>使用Java Persistence API进行数据库访问的支持。</td></tr><tr><td><code>spring-boot-starter-data-ldap</code></td><td>LDAP（轻型目录访问协议）支持。</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td>MongoDB文档数据库的支持。</td></tr><tr><td><code>spring-boot-starter-data-neo4j</code></td><td>Neo4j图形数据库的支持。</td></tr><tr><td><code>spring-boot-starter-data-redis</code></td><td>Redis键值数据存储的支持。</td></tr><tr><td><code>spring-boot-starter-data-rest</code></td><td>用于快速创建RESTful Web服务的库，基于Spring Data概念。</td></tr><tr><td><code>spring-boot-starter-freemarker</code></td><td>使用FreeMarker模板引擎进行Web视图的支持。</td></tr><tr><td><code>spring-boot-starter-groovy-templates</code></td><td>使用Groovy模板引擎进行Web视图的支持。</td></tr><tr><td><code>spring-boot-starter-hateoas</code></td><td>提供了一些开箱即用的API来实现超媒体驱动的Web服务。</td></tr><tr><td><code>spring-boot-starter-integration</code></td><td>Spring Integration消息和事件驱动的解决方案的支持。</td></tr><tr><td><code>spring-boot-starter-jdbc</code></td><td>使用JDBC进行数据库访问的支持。</td></tr><tr><td><code>spring-boot-starter-jersey</code></td><td>使用JAX-RS和Jersey进行RESTful Web服务的支持。</td></tr><tr><td><code>spring-boot-starter-jooq</code></td><td>JOOQ（Java对象的SQL查询）的支持。</td></tr><tr><td><code>spring-boot-starter-json</code></td><td>Jackson JSON处理器的支持。</td></tr><tr><td><code>spring-boot-starter-jsonp</code></td><td>JSONP的支持。</td></tr><tr><td><code>spring-boot-starter-mail</code></td><td>JavaMail发送电子邮件的支持。</td></tr><tr><td><code>spring-boot-starter-mustache</code></td><td>使用Mustache模板引擎进行Web视图的支持。</td></tr><tr><td><code>spring-boot-starter-oauth2-client</code></td><td>OAuth 2.0客户端的支持。</td></tr><tr><td><code>spring-boot-starter-oauth2-resource-server</code></td><td>OAuth 2.0资源服务器的支持。</td></tr><tr><td><code>spring-boot-starter-quartz</code></td><td>Quartz调度框架的支持。</td></tr><tr><td><code>spring-boot-starter-security</code></td><td>Spring Security的支持，实现Web和方法级别的安全性。</td></tr><tr><td><code>spring-boot-starter-test</code></td><td>用于编写和运行单元测试和集成测试的支持。</td></tr><tr><td><code>spring-boot-starter-thymeleaf</code></td><td>使用Thymeleaf模板引擎进行Web视图的支持。</td></tr><tr><td><code>spring-boot-starter-validation</code></td><td>Bean验证API（JSR 303）的支持。</td></tr><tr><td><code>spring-boot-starter-web</code></td><td>提供了Spring MVC和REST Web服务的支持。</td></tr><tr><td><code>spring-boot-starter-web-services</code></td><td>使用Spring Web服务进行SOAP风格的Web服务的支持。</td></tr></tbody></table></li></ul><h3 id="_3-spring-boot-starter-parent是怎么实现它的功能的" tabindex="-1"><a class="header-anchor" href="#_3-spring-boot-starter-parent是怎么实现它的功能的" aria-hidden="true">#</a> 3 spring-boot-starter-parent是怎么实现它的功能的</h3><p>spring-boot-starter-parent是一个特殊的Starter项目，它为我们的应用程序提供默认配置和完整的依赖树，以快速构建Spring Boot项目。它还提供了Maven插件的默认配置，例如maven-failsafe-plugin、maven-jar-plugin、maven-surefire-plugin和maven-war-plugin。该项目提供了一个优秀、稳健的基础，方便我们构建Spring Boot应用程序。</p><p>Spring Boot Starter Parent是通过继承pom.xml文件，为Spring Boot应用程序提供默认设置和约定的依赖管理。这些默认设置和约定包括常用的插件及其配置、插件版本、项目结构、构建工具等。当我们使用Spring Boot Starter Parent作为我们Maven项目的父级时，它将自动提供一些默认的依赖关系，这使得编写Spring Boot应用程序变得更加简单快捷。同时，它还提供了Maven插件的默认配置，使得我们无需手动配置大量的插件来构建一个完整的Spring Boot应用程序。此外，Spring Boot Starter Parent还定义了许多属性，可以在我们的pom.xml文件中直接使用，方便我们使用。这些功能可以通过Spring Boot Starter Parent的POM文件中的配置来实现。</p><h3 id="_4-springboot集成mybatis这类的包-是怎么把mapper接口注入容器的" tabindex="-1"><a class="header-anchor" href="#_4-springboot集成mybatis这类的包-是怎么把mapper接口注入容器的" aria-hidden="true">#</a> 4 SpringBoot集成Mybatis这类的包 是怎么把Mapper接口注入容器的</h3><ul><li><p><strong>集成使用Mybatis非常简单</strong></p><p>1.pom中添加依赖</p><p>2.在mapper接口上添加<code>@Mapper</code>注解</p></li><li><p><strong>分析(每一个mapper底层其实是mapper工厂)</strong></p><ul><li><p>**<code>@MapperScanner</code>**注解</p><p>导入了MapperScannerRegistrar这个类，这个类实现了Spring提供的<code>ImportBeanDefinitionRegistrar</code>接口</p><p>在这个类中，重写的<code>registerBeanDefinitions()</code>方法获取了<code>@MapperScanner</code>注解的类，判断不为空后，把<code>MapperScannerConfigurer</code>的类注册进了spring容器中，再通过Mapper扫描配置类把扫描到的Mapper接口注册为<code>MapperFactoryBean</code>，实现了自动化配置。</p><p>每次获取mapper时，其实是通过<code>MapperFactoryBean</code>内部的<code>getObject()</code>方法获得mapper实例</p></li></ul></li></ul><h3 id="_5-springbootapplication-注解中的属性相当于哪几个注解" tabindex="-1"><a class="header-anchor" href="#_5-springbootapplication-注解中的属性相当于哪几个注解" aria-hidden="true">#</a> 5 @SpringBootApplication 注解中的属性相当于哪几个注解</h3><p>等价于以默认属性使用 @Configuration，@EnableAutoConfiguration 和 @ComponentScan</p><h2 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h2><h3 id="_1-git-fetch和git-pull的区别" tabindex="-1"><a class="header-anchor" href="#_1-git-fetch和git-pull的区别" aria-hidden="true">#</a> 1 git fetch和git pull的区别</h3><p><strong>git fetch:</strong> 相当于是从远程获取最新版本到本地，不会自动merge</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch origin master
<span class="token function">git</span> log <span class="token parameter variable">-p</span> master<span class="token punctuation">..</span>origin/master
<span class="token function">git</span> merge origin/master

以上命令的含义：
	首先从远程的origin的master主分支下载最新的版本到origin/master分支上
	然后比较本地的master分支和origin/master分支的差别
	最后进行合并
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>git pull:</strong> 相当于是从远程获取最新版本并merge到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin master

上述命令其实相当于git fetch 和 <span class="token function">git</span> merge
在实际使用中，git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116),l=[c];function r(u,d){return a(),s("div",null,l)}const m=n(i,[["render",r],["__file","朝花夕拾.html.vue"]]);export{m as default};
