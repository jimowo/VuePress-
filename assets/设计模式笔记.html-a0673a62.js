const e=JSON.parse('{"key":"v-631a2408","path":"/essay/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","author":"jimowo","icon":"condition","date":"2022-09-08T00:00:00.000Z","order":1,"category":["设计模式"],"tag":["Java"],"description":"设计模式笔记 设计模式指北 面向对象当然也有缺点，比如，最常见的，人与人对世界的认识不同，所以每个人设计的对象结构都不尽相同，于是阅读其他人的代码时，效率就会比较低。长时间面向对象编程之后，一些前辈达人总结出来能够更进一步改善代码结构的方式方法，便是设计模式。 理解和学会设计模式，对我们之后开发会有很大的帮助。 实际上，设计模式离我们并不远。设计模式提出于1990年，距今将近30年，早已渗入各种流行软件的设计当中。以我们 Web 前端为例，除了本文将重点讲述的几个设计模式之外，DOM 事件机制就是观察者模式（Observer）的实现，而 JS 也是基于原型链模式（Prototype）打造的。","head":[["meta",{"property":"og:url","content":"https://jimowo.github.io/essay/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"博客|随笔|项目"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式笔记 设计模式指北 面向对象当然也有缺点，比如，最常见的，人与人对世界的认识不同，所以每个人设计的对象结构都不尽相同，于是阅读其他人的代码时，效率就会比较低。长时间面向对象编程之后，一些前辈达人总结出来能够更进一步改善代码结构的方式方法，便是设计模式。 理解和学会设计模式，对我们之后开发会有很大的帮助。 实际上，设计模式离我们并不远。设计模式提出于1990年，距今将近30年，早已渗入各种流行软件的设计当中。以我们 Web 前端为例，除了本文将重点讲述的几个设计模式之外，DOM 事件机制就是观察者模式（Observer）的实现，而 JS 也是基于原型链模式（Prototype）打造的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jimowo.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-08T03:15:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"设计模式"}],["meta",{"property":"article:author","content":"jimowo"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-09-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-08T03:15:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"https://jimowo.github.io/\\"],\\"datePublished\\":\\"2022-09-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-08T03:15:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jimowo\\"}]}"]]},"headers":[{"level":2,"title":"设计模式指北","slug":"设计模式指北","link":"#设计模式指北","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[]},{"level":3,"title":"Java实现","slug":"java实现","link":"#java实现","children":[]}]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-1","link":"#功能介绍-1","children":[]},{"level":3,"title":"Java实现","slug":"java实现-1","link":"#java实现-1","children":[]}]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-2","link":"#功能介绍-2","children":[]},{"level":3,"title":"Java实现","slug":"java实现-2","link":"#java实现-2","children":[]}]},{"level":2,"title":"模板模式","slug":"模板模式","link":"#模板模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-3","link":"#功能介绍-3","children":[]},{"level":3,"title":"Java实现","slug":"java实现-3","link":"#java实现-3","children":[]}]},{"level":2,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-4","link":"#功能介绍-4","children":[]},{"level":3,"title":"Java实现","slug":"java实现-4","link":"#java实现-4","children":[]}]},{"level":2,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-5","link":"#功能介绍-5","children":[]},{"level":3,"title":"Java实现","slug":"java实现-5","link":"#java实现-5","children":[]}]},{"level":2,"title":"桥接模式","slug":"桥接模式","link":"#桥接模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-6","link":"#功能介绍-6","children":[]},{"level":3,"title":"Java实现","slug":"java实现-6","link":"#java实现-6","children":[]}]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[{"level":3,"title":"功能介绍","slug":"功能介绍-7","link":"#功能介绍-7","children":[]},{"level":3,"title":"Java实现","slug":"java实现-7","link":"#java实现-7","children":[]}]}],"git":{"createdTime":1688780897000,"updatedTime":1688786117000,"contributors":[{"name":"jimowo","email":"1252480844@qq.com","commits":2}]},"readingTime":{"minutes":20.85,"words":6256},"filePathRelative":"essay/设计模式笔记.md","localizedDate":"2022年9月8日","excerpt":"<h1> 设计模式笔记</h1>\\n<h2> 设计模式指北</h2>\\n<p>面向对象当然也有缺点，比如，最常见的，人与人对世界的认识不同，所以每个人设计的对象结构都不尽相同，于是阅读其他人的代码时，效率就会比较低。长时间面向对象编程之后，一些前辈达人总结出来能够更进一步改善代码结构的方式方法，便是设计模式。</p>\\n<p>理解和学会设计模式，对我们之后开发会有很大的帮助。</p>\\n<p>实际上，设计模式离我们并不远。设计模式提出于1990年，距今将近30年，早已渗入各种流行软件的设计当中。以我们 Web 前端为例，除了本文将重点讲述的几个设计模式之外，DOM 事件机制就是观察者模式（Observer）的实现，而 JS 也是基于原型链模式（Prototype）打造的。</p>","autoDesc":true}');export{e as data};
